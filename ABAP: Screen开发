
**第三个程序： screen开发
*TABLES: SFLIGHT,SCUSTOM,SBOOK.
*TYPES: BEGIN OF ty_sflight,
*         carrid  type sflight-carrid,
*         fldate  type sflight-fldate,
*         price   type sflight-price,
*         name    type scustom-name,
*         city    type scustom-city,
*         customid type sbook-customid,
*END OF ty_sflight.
*DATA: i_flight type STANDARD TABLE OF ty_sflight INITIAL SIZE 0,
*      wa_flight like line of i_flight.
*
*DATA: CIDIN TYPE sflight-carrid,
*      NAIN  TYPE scustom-name,
*      CSIDIN TYPE sbook-CUSTOMID.
*
*DATA:OK_CODE TYPE SY-UCOMM,
*     SAVE_OK TYPE OK_CODE,
*     OUTPUT TYPE OK_CODE.
*
*CONTROLS: IT_TEST TYPE TABLEVIEW USING SCREEN 101.
*CALL SCREEN 100.
*
**MODULE CANCEL INPUT.
**  LEAVE PROGRAM.
**ENDMODULE.
*
*MODULE USER_COMMAND_0100 INPUT.
*  CASE OK_CODE.
*   WHEN 'OK'.
*     SELECT sflight~carrid, sflight~fldate,sflight~price,scustom~name,scustom~city,sbook~customid
*      FROM sbook LEFT join sflight on sbook~carrid = sflight~carrid
*                 LEFT join scustom on sbook~customid = scustom~id
*      INTO TABLE @i_flight
*      WHERE scustom~name = @NAIN  AND sflight~carrid = @CIDIN AND  sbook~customid = @CSIDIN.
*     CALL SCREEN 101.
*      WHEN 'EXIT' OR 'CANCEL'OR'BACK'.
*          LEAVE TO SCREEN 0.
*      WHEN OTHERS.
*        OUTPUT = SAVE_OK.
*    ENDCASE.
*ENDMODULE.
*
*
*
*MODULE status_0101 OUTPUT.
*
*SET PF-STATUS 'SCREEEN101'.
*SET TITLEBAR 'TITLE101'.
**DESCRIBE TABLE i_flight LINES table-LINES.
*ENDMODULE.
*
**MODULE filltab1 OUTPUT. "逐行把內表的數據寫到表控制器中
**  READ TABLE I_FLIGHT INTO WA_FLIGHT INDEX table-current_line.
**ENDMODULE.
**
**
**
**MODULE readtab1 OUTPUT.
**  MODIFY I_FLIGHT FROM wa_flight INDEX table-current_line.
**ENDMODULE.
*
*MODULE user_command_0101 INPUT.
*    CASE ok_CODE.
*      WHEN 'EXIT' OR 'CANCEL' OR 'BACK'.
*          LEAVE TO SCREEN 0.
*      WHEN OTHERS.
*        OUTPUT = SAVE_OK.
*    ENDCASE.
*ENDMODULE.
*
**&SPWIZARD: DECLARATION OF TABLECONTROL 'IT_TEST' ITSELF
*
**&SPWIZARD: LINES OF TABLECONTROL 'IT_TEST'
*DATA:     G_IT_TEST_LINES  LIKE SY-LOOPC.
*
**&SPWIZARD: OUTPUT MODULE FOR TC 'IT_TEST'. DO NOT CHANGE THIS LINE!
**&SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
*MODULE IT_TEST_CHANGE_TC_ATTR OUTPUT.
*  DESCRIBE TABLE I_FLIGHT LINES IT_TEST-lines.
*ENDMODULE.
*
**&SPWIZARD: OUTPUT MODULE FOR TC 'IT_TEST'. DO NOT CHANGE THIS LINE!
**&SPWIZARD: GET LINES OF TABLECONTROL
*MODULE IT_TEST_GET_LINES OUTPUT.
*  G_IT_TEST_LINES = SY-LOOPC.
*ENDMODULE.
*
**&SPWIZARD: INPUT MODULE FOR TC 'IT_TEST'. DO NOT CHANGE THIS LINE!
**&SPWIZARD: PROCESS USER COMMAND
*MODULE IT_TEST_USER_COMMAND INPUT.
*  OK_CODE = SY-UCOMM.
*  PERFORM USER_OK_TC USING    'IT_TEST'
*                              'I_FLIGHT'
*                              'CHK'
*                     CHANGING OK_CODE.
*  SY-UCOMM = OK_CODE.
*ENDMODULE.
*
**----------------------------------------------------------------------*
**   INCLUDE TABLECONTROL_FORMS                                         *
**----------------------------------------------------------------------*
*
**&---------------------------------------------------------------------*
**&      Form  USER_OK_TC                                               *
**&---------------------------------------------------------------------*
* FORM USER_OK_TC USING    P_TC_NAME TYPE DYNFNAM
*                          P_TABLE_NAME
*                          P_MARK_NAME
*                 CHANGING P_OK      LIKE SY-UCOMM.
*
**&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
*   DATA: L_OK              TYPE SY-UCOMM,
*         L_OFFSET          TYPE I.
**&SPWIZARD: END OF LOCAL DATA------------------------------------------*
*
**&SPWIZARD: Table control specific operations                          *
**&SPWIZARD: evaluate TC name and operations                            *
*   SEARCH P_OK FOR P_TC_NAME.
*   IF SY-SUBRC <> 0.
*     EXIT.
*   ENDIF.
*   L_OFFSET = STRLEN( P_TC_NAME ) + 1.
*   L_OK = P_OK+L_OFFSET.
**&SPWIZARD: execute general and TC specific operations                 *
*   CASE L_OK.
*     WHEN 'INSR'.                      "insert row
*       PERFORM FCODE_INSERT_ROW USING    P_TC_NAME
*                                         P_TABLE_NAME.
*       CLEAR P_OK.
*
*     WHEN 'DELE'.                      "delete row
*       PERFORM FCODE_DELETE_ROW USING    P_TC_NAME
*                                         P_TABLE_NAME
*                                         P_MARK_NAME.
*       CLEAR P_OK.
*
*     WHEN 'P--' OR                     "top of list
*          'P-'  OR                     "previous page
*          'P+'  OR                     "next page
*          'P++'.                       "bottom of list
*       PERFORM COMPUTE_SCROLLING_IN_TC USING P_TC_NAME
*                                             L_OK.
*       CLEAR P_OK.
**     WHEN 'L--'.                       "total left
**       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
**
**     WHEN 'L-'.                        "column left
**       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
**
**     WHEN 'R+'.                        "column right
**       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
**
**     WHEN 'R++'.                       "total right
**       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
**
*     WHEN 'MARK'.                      "mark all filled lines
*       PERFORM FCODE_TC_MARK_LINES USING P_TC_NAME
*                                         P_TABLE_NAME
*                                         P_MARK_NAME   .
*       CLEAR P_OK.
*
*     WHEN 'DMRK'.                      "demark all filled lines
*       PERFORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
*                                           P_TABLE_NAME
*                                           P_MARK_NAME .
*       CLEAR P_OK.
*
**     WHEN 'SASCEND'   OR
**          'SDESCEND'.                  "sort column
**       PERFORM FCODE_SORT_TC USING P_TC_NAME
**                                   l_ok.
*
*   ENDCASE.
*
* ENDFORM.                              " USER_OK_TC
*
**&---------------------------------------------------------------------*
**&      Form  FCODE_INSERT_ROW                                         *
**&---------------------------------------------------------------------*
* FORM fcode_insert_row
*               USING    P_TC_NAME           TYPE DYNFNAM
*                        P_TABLE_NAME             .
*
**&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
*   DATA L_LINES_NAME       LIKE FELD-NAME.
*   DATA L_SELLINE          LIKE SY-STEPL.
*   DATA L_LASTLINE         TYPE I.
*   DATA L_LINE             TYPE I.
*   DATA L_TABLE_NAME       LIKE FELD-NAME.
*   FIELD-SYMBOLS <TC>                 TYPE CXTAB_CONTROL.
*   FIELD-SYMBOLS <TABLE>              TYPE STANDARD TABLE.
*   FIELD-SYMBOLS <LINES>              TYPE I.
**&SPWIZARD: END OF LOCAL DATA------------------------------------------*
*
*   ASSIGN (P_TC_NAME) TO <TC>.
*
**&SPWIZARD: get the table, which belongs to the tc                     *
*   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
*   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline
*
**&SPWIZARD: get looplines of TableControl                              *
*   CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_LINES_NAME.
*   ASSIGN (L_LINES_NAME) TO <LINES>.
*
**&SPWIZARD: get current line                                           *
*   GET CURSOR LINE L_SELLINE.
*   IF SY-SUBRC <> 0.                   " append line to table
*     L_SELLINE = <TC>-LINES + 1.
**&SPWIZARD: set top line                                               *
*     IF L_SELLINE > <LINES>.
*       <TC>-TOP_LINE = L_SELLINE - <LINES> + 1 .
*     ELSE.
*       <TC>-TOP_LINE = 1.
*     ENDIF.
*   ELSE.                               " insert line into table
*     L_SELLINE = <TC>-TOP_LINE + L_SELLINE - 1.
*     L_LASTLINE = <TC>-TOP_LINE + <LINES> - 1.
*   ENDIF.
**&SPWIZARD: set new cursor line                                        *
*   L_LINE = L_SELLINE - <TC>-TOP_LINE + 1.
*
**&SPWIZARD: insert initial line                                        *
*   INSERT INITIAL LINE INTO <TABLE> INDEX L_SELLINE.
*   <TC>-LINES = <TC>-LINES + 1.
**&SPWIZARD: set cursor                                                 *
*   SET CURSOR LINE L_LINE.
*
* ENDFORM.                              " FCODE_INSERT_ROW
*
**&---------------------------------------------------------------------*
**&      Form  FCODE_DELETE_ROW                                         *
**&---------------------------------------------------------------------*
* FORM fcode_delete_row
*               USING    P_TC_NAME           TYPE DYNFNAM
*                        P_TABLE_NAME
*                        P_MARK_NAME   .
*
**&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
*   DATA L_TABLE_NAME       LIKE FELD-NAME.
*
*   FIELD-SYMBOLS <TC>         TYPE cxtab_control.
*   FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
*   FIELD-SYMBOLS <WA>.
*   FIELD-SYMBOLS <MARK_FIELD>.
**&SPWIZARD: END OF LOCAL DATA------------------------------------------*
*
*   ASSIGN (P_TC_NAME) TO <TC>.
*
**&SPWIZARD: get the table, which belongs to the tc                     *
*   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
*   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline
*
**&SPWIZARD: delete marked lines                                        *
*   DESCRIBE TABLE <TABLE> LINES <TC>-LINES.
*
*   LOOP AT <TABLE> ASSIGNING <WA>.
*
**&SPWIZARD: access to the component 'FLAG' of the table header         *
*     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.
*
*     IF <MARK_FIELD> = 'X'.
*       DELETE <TABLE> INDEX SYST-TABIX.
*       IF SY-SUBRC = 0.
*         <TC>-LINES = <TC>-LINES - 1.
*       ENDIF.
*     ENDIF.
*   ENDLOOP.
*
* ENDFORM.                              " FCODE_DELETE_ROW
*
**&---------------------------------------------------------------------*
**&      Form  COMPUTE_SCROLLING_IN_TC
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_TC_NAME  name of tablecontrol
**      -->P_OK       ok code
**----------------------------------------------------------------------*
* FORM COMPUTE_SCROLLING_IN_TC USING    P_TC_NAME
*                                       P_OK.
**&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
*   DATA L_TC_NEW_TOP_LINE     TYPE I.
*   DATA L_TC_NAME             LIKE FELD-NAME.
*   DATA L_TC_LINES_NAME       LIKE FELD-NAME.
*   DATA L_TC_FIELD_NAME       LIKE FELD-NAME.
*
*   FIELD-SYMBOLS <TC>         TYPE cxtab_control.
*   FIELD-SYMBOLS <LINES>      TYPE I.
**&SPWIZARD: END OF LOCAL DATA------------------------------------------*
*
*   ASSIGN (P_TC_NAME) TO <TC>.
**&SPWIZARD: get looplines of TableControl                              *
*   CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_TC_LINES_NAME.
*   ASSIGN (L_TC_LINES_NAME) TO <LINES>.
*
*
**&SPWIZARD: is no line filled?                                         *
*   IF <TC>-LINES = 0.
**&SPWIZARD: yes, ...                                                   *
*     L_TC_NEW_TOP_LINE = 1.
*   ELSE.
**&SPWIZARD: no, ...                                                    *
*     CALL FUNCTION 'SCROLLING_IN_TABLE'
*          EXPORTING
*               ENTRY_ACT             = <TC>-TOP_LINE
*               ENTRY_FROM            = 1
*               ENTRY_TO              = <TC>-LINES
*               LAST_PAGE_FULL        = 'X'
*               LOOPS                 = <LINES>
*               OK_CODE               = P_OK
*               OVERLAPPING           = 'X'
*          IMPORTING
*               ENTRY_NEW             = L_TC_NEW_TOP_LINE
*          EXCEPTIONS
**              NO_ENTRY_OR_PAGE_ACT  = 01
**              NO_ENTRY_TO           = 02
**              NO_OK_CODE_OR_PAGE_GO = 03
*               OTHERS                = 0.
*   ENDIF.
*
**&SPWIZARD: get actual tc and column                                   *
*   GET CURSOR FIELD L_TC_FIELD_NAME
*              AREA  L_TC_NAME.
*
*   IF SYST-SUBRC = 0.
*     IF L_TC_NAME = P_TC_NAME.
**&SPWIZARD: et actual column                                           *
*       SET CURSOR FIELD L_TC_FIELD_NAME LINE 1.
*     ENDIF.
*   ENDIF.
*
**&SPWIZARD: set the new top line                                       *
*   <TC>-TOP_LINE = L_TC_NEW_TOP_LINE.
*
*
* ENDFORM.                              " COMPUTE_SCROLLING_IN_TC
*
**&---------------------------------------------------------------------*
**&      Form  FCODE_TC_MARK_LINES
**&---------------------------------------------------------------------*
**       marks all TableControl lines
**----------------------------------------------------------------------*
**      -->P_TC_NAME  name of tablecontrol
**----------------------------------------------------------------------*
*FORM FCODE_TC_MARK_LINES USING P_TC_NAME
*                               P_TABLE_NAME
*                               P_MARK_NAME.
**&SPWIZARD: EGIN OF LOCAL DATA-----------------------------------------*
*  DATA L_TABLE_NAME       LIKE FELD-NAME.
*
*  FIELD-SYMBOLS <TC>         TYPE cxtab_control.
*  FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
*  FIELD-SYMBOLS <WA>.
*  FIELD-SYMBOLS <MARK_FIELD>.
**&SPWIZARD: END OF LOCAL DATA------------------------------------------*
*
*  ASSIGN (P_TC_NAME) TO <TC>.
*
**&SPWIZARD: get the table, which belongs to the tc                     *
*   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
*   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline
*
**&SPWIZARD: mark all filled lines                                      *
*  LOOP AT <TABLE> ASSIGNING <WA>.
*
**&SPWIZARD: access to the component 'FLAG' of the table header         *
*     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.
*
*     <MARK_FIELD> = 'X'.
*  ENDLOOP.
*ENDFORM.                                          "fcode_tc_mark_lines
*
**&---------------------------------------------------------------------*
**&      Form  FCODE_TC_DEMARK_LINES
**&---------------------------------------------------------------------*
**       demarks all TableControl lines
**----------------------------------------------------------------------*
**      -->P_TC_NAME  name of tablecontrol
**----------------------------------------------------------------------*
*FORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
*                                 P_TABLE_NAME
*                                 P_MARK_NAME .
**&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
*  DATA L_TABLE_NAME       LIKE FELD-NAME.
*
*  FIELD-SYMBOLS <TC>         TYPE cxtab_control.
*  FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
*  FIELD-SYMBOLS <WA>.
*  FIELD-SYMBOLS <MARK_FIELD>.
**&SPWIZARD: END OF LOCAL DATA------------------------------------------*
*
*  ASSIGN (P_TC_NAME) TO <TC>.
*
**&SPWIZARD: get the table, which belongs to the tc                     *
*   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
*   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline
*
**&SPWIZARD: demark all filled lines                                    *
*  LOOP AT <TABLE> ASSIGNING <WA>.
*
**&SPWIZARD: access to the component 'FLAG' of the table header         *
*     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.
*
*     <MARK_FIELD> = SPACE.
*  ENDLOOP.
*ENDFORM.                                          "fcode_tc_mark_lines
